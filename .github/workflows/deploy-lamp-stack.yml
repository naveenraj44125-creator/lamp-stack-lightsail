name: Config-Driven LAMP Stack Deployment

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  load-config:
    runs-on: ubuntu-latest
    outputs:
      instance_name: ${{ steps.config.outputs.instance_name }}
      static_ip: ${{ steps.config.outputs.static_ip }}
      aws_region: ${{ steps.config.outputs.aws_region }}
      php_version: ${{ steps.config.outputs.php_version }}
      should_deploy: ${{ steps.config.outputs.should_deploy }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Load Configuration
      id: config
      run: |
        python3 << 'EOF'
        import yaml
        import os
        
        print("🔧 Loading configuration from deployment.config.yml...")
        
        # Load configuration
        with open('deployment.config.yml', 'r') as f:
            config = yaml.safe_load(f)
        
        # Extract values from config
        instance_name = config['lightsail']['instance_name']
        static_ip = config['lightsail']['static_ip']
        aws_region = config['aws']['region']
        php_version = config['application']['php_version']
        
        # Show configuration
        print(f"✅ Instance Name: {instance_name}")
        print(f"✅ AWS Region: {aws_region}")
        print(f"✅ PHP Version: {php_version}")
        print(f"✅ Static IP: {static_ip}")
        
        # Determine deployment based on config and event
        branch = os.environ.get('GITHUB_REF_NAME', 'main')
        event_name = os.environ.get('GITHUB_EVENT_NAME', 'push')
        should_deploy = (branch in config['github_actions']['triggers']['push_branches'] and 
                        (event_name == 'push' or event_name == 'workflow_dispatch'))
        
        print(f"🚀 Should Deploy: {should_deploy}")
        
        # Write to GitHub outputs
        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write(f"instance_name={instance_name}\n")
            f.write(f"static_ip={static_ip}\n")
            f.write(f"aws_region={aws_region}\n")
            f.write(f"php_version={php_version}\n")
            f.write(f"should_deploy={str(should_deploy).lower()}\n")
        EOF

  test:
    needs: load-config
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ needs.load-config.outputs.php_version }}
        extensions: pdo, pdo_mysql

    - name: Validate PHP syntax
      run: |
        find . -name "*.php" -exec php -l {} \;

    - name: Test PHP application
      run: |
        php -S localhost:8000 index.php &
        sleep 5
        curl -f http://localhost:8000/ || exit 1

  pre-steps-common:
    needs: [load-config, test]
    runs-on: ubuntu-latest
    if: needs.load-config.outputs.should_deploy == 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ needs.load-config.outputs.aws_region }}

    - name: Setup Python environment
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install boto3

    - name: Common Environment Preparation
      run: |
        echo "🔧 Running common pre-deployment steps (SSH check, directories)..."
        python3 workflows/deploy-pre-steps-common.py --instance-name ${{ needs.load-config.outputs.instance_name }} --region ${{ needs.load-config.outputs.aws_region }}

  pre-steps-lamp:
    needs: [load-config, pre-steps-common]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ needs.load-config.outputs.aws_region }}

    - name: Setup Python environment
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install boto3

    - name: LAMP Stack Installation & Configuration
      run: |
        echo "🔧 Running LAMP-specific pre-deployment steps (LAMP installation)..."
        python3 workflows/deploy-pre-steps-lamp.py --instance-name ${{ needs.load-config.outputs.instance_name }} --region ${{ needs.load-config.outputs.aws_region }}

  application-install:
    needs: [load-config, pre-steps-lamp]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ needs.load-config.outputs.aws_region }}

    - name: Setup Python environment
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install boto3

    - name: Create deployment package
      run: |
        echo "📦 Creating application package..."
        tar -czf app.tar.gz index.php css/ config/ || tar -czf app.tar.gz *
        ls -la app.tar.gz

    - name: Upload application package
      uses: actions/upload-artifact@v4
      with:
        name: application-package
        path: app.tar.gz
        retention-days: 1

  post-steps-common:
    needs: [load-config, application-install]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ needs.load-config.outputs.aws_region }}

    - name: Setup Python environment
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install boto3

    - name: Download application package
      uses: actions/download-artifact@v4
      with:
        name: application-package

    - name: Common Application Deployment
      run: |
        echo "🚀 Running common post-deployment steps (file upload, extraction)..."
        python3 workflows/deploy-post-steps-common.py \
          app.tar.gz \
          --instance-name ${{ needs.load-config.outputs.instance_name }} \
          --region ${{ needs.load-config.outputs.aws_region }} \
          --verify \
          --cleanup \
          --env GITHUB_SHA=${{ github.sha }} \
          --env GITHUB_REF=${{ github.ref_name }} \
          --env GITHUB_ACTOR=${{ github.actor }} \
          --env GITHUB_RUN_ID=${{ github.run_id }}

  post-steps-lamp:
    needs: [load-config, post-steps-common]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ needs.load-config.outputs.aws_region }}

    - name: Setup Python environment
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install boto3

    - name: LAMP Application Configuration & Deployment
      run: |
        echo "🚀 Running LAMP-specific post-deployment steps (services, permissions)..."
        python3 workflows/deploy-post-steps-lamp.py \
          --instance-name ${{ needs.load-config.outputs.instance_name }} \
          --region ${{ needs.load-config.outputs.aws_region }} \
          --verify \
          --optimize

  verification:
    needs: [load-config, post-steps-lamp]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ needs.load-config.outputs.aws_region }}

    - name: Setup Python environment
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install boto3

    - name: Application Health Check
      run: |
        echo "🔍 Running application health check..."
        echo "✅ Health check completed by LAMP post-deployment steps"
        echo "🔧 Verification is handled by deploy-post-steps-lamp.py with --verify flag"

    - name: External Connectivity Test
      run: |
        echo "🌐 Testing external connectivity..."
        echo "Waiting for application to be ready..."
        sleep 30

        # Test the deployed application from external network
        for i in {1..10}; do
          if curl -f -s http://${{ needs.load-config.outputs.static_ip }}/ | grep -q "Hello Welcome"; then
            echo "✅ Application is accessible externally!"
            echo "🌐 Application URL: http://${{ needs.load-config.outputs.static_ip }}/"
            exit 0
          fi
          echo "Waiting for application to respond... ($i/10)"
          sleep 10
        done

        echo "❌ External connectivity test failed"
        exit 1

    - name: Performance & Security Check
      run: |
        echo "⚡ Running performance and security checks..."

        # Basic performance test
        echo "Testing response time..."
        time curl -s http://${{ needs.load-config.outputs.static_ip }}/ > /dev/null

        # Check HTTP headers
        echo "Checking HTTP headers..."
        curl -I http://${{ needs.load-config.outputs.static_ip }}/

        # Test different endpoints if they exist
        echo "Testing application endpoints..."
        curl -f -s http://${{ needs.load-config.outputs.static_ip }}/index.php || echo "index.php test completed"

    - name: Deployment Summary
      if: always()
      run: |
        echo "## 🚀 Config-Driven LAMP Stack Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Configuration (from deployment.config.yml)" >> $GITHUB_STEP_SUMMARY
        echo "- **Instance**: ${{ needs.load-config.outputs.instance_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **IP Address**: ${{ needs.load-config.outputs.static_ip }}" >> $GITHUB_STEP_SUMMARY
        echo "- **AWS Region**: ${{ needs.load-config.outputs.aws_region }}" >> $GITHUB_STEP_SUMMARY
        echo "- **PHP Version**: ${{ needs.load-config.outputs.php_version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Application URL**: http://${{ needs.load-config.outputs.static_ip }}/" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🎯 Deployment Details" >> $GITHUB_STEP_SUMMARY
        echo "- **LAMP Stack**: ✅ Installed via config-driven modular approach" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployed by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment Time**: $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "- **Verification**: ✅ Health check, connectivity, and performance tests completed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**🎉 All parameters read from deployment.config.yml - No hardcoded values!**" >> $GITHUB_STEP_SUMMARY
