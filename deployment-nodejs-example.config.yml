# Example: Node.js Application Deployment Configuration
# This demonstrates how to deploy a Node.js application with the generic system

# AWS Configuration
aws:
  region: us-east-1
  
# Lightsail Instance Configuration
lightsail:
  instance_name: nodejs-app-demo
  static_ip: 98.91.3.69
  
# Application Configuration
application:
  name: nodejs-express-app
  version: "1.0.0"
  type: api  # API application type
  
  # Files to include in deployment package
  package_files:
    - "app.js"
    - "package.json"
    - "routes/"
    - "public/"
    - "views/"
  
  # Fallback: include all files if specific files don't exist
  package_fallback: true
  
  # Environment variables to set on the instance
  environment_variables:
    NODE_ENV: production
    PORT: 3000
    APP_NAME: "Node.js Express App"

# Dependencies Configuration - Only enable what you need!
dependencies:
  # Web Server - Using Nginx as reverse proxy
  nginx:
    enabled: true
    version: "latest"
    config:
      document_root: "/var/www/html"
      enable_ssl: false
  
  # Apache not needed for Node.js
  apache:
    enabled: false
  
  # Database - Using PostgreSQL
  postgresql:
    enabled: true
    version: "14"
    config:
      create_app_database: true
      database_name: "nodejs_app_db"
  
  # MySQL not needed
  mysql:
    enabled: false
  
  # Programming Language - Node.js with Express and PM2
  nodejs:
    enabled: true
    version: "18"
    config:
      npm_packages:
        - "express"
        - "pm2"
        - "nodemon"
      package_manager: "npm"
  
  # PHP not needed for Node.js app
  php:
    enabled: false
  
  # Python not needed
  python:
    enabled: false
  
  # Caching - Redis for session storage
  redis:
    enabled: true
    version: "latest"
    config:
      bind_all_interfaces: false
  
  # Other services
  memcached:
    enabled: false
  
  docker:
    enabled: false
  
  # Essential tools
  git:
    enabled: true
    config:
      install_lfs: false
  
  # Security
  firewall:
    enabled: true
    config:
      allowed_ports:
        - "22"    # SSH
        - "80"    # HTTP
        - "443"   # HTTPS
        - "3000"  # Node.js app port
      deny_all_other: true
  
  ssl_certificates:
    enabled: false  # Enable later for production
  
  monitoring:
    enabled: true
    config:
      tools:
        - "htop"
        - "iotop"

# Deployment Configuration
deployment:
  # Timeout settings (in seconds)
  timeouts:
    ssh_connection: 120
    command_execution: 300
    health_check: 180
  
  # Retry settings
  retries:
    max_attempts: 3
    ssh_connection: 5
  
  # Deployment steps configuration
  steps:
    pre_deployment:
      common:
        enabled: true
        update_packages: true
        create_directories: true
        backup_enabled: true
      dependencies:
        enabled: true
        install_system_deps: true
        configure_services: true
    
    post_deployment:
      common:
        enabled: true
        verify_extraction: true
        create_env_file: true
        cleanup_temp_files: true
      dependencies:
        enabled: true
        configure_application: true
        set_permissions: true
        restart_services: true
        optimize_performance: true
    
    verification:
      enabled: true
      health_check: true
      external_connectivity: true
      performance_test: true
      security_check: true
      endpoints_to_test:
        - "/"
        - "/api/health"

# GitHub Actions Configuration
github_actions:
  # Trigger configuration
  triggers:
    push_branches:
      - main
      - master
    pull_request_branches:
      - main
      - master
    workflow_dispatch: true
  
  # Job configuration
  jobs:
    test:
      enabled: true
      language_specific_tests: true
      local_server_test: true
      test_port: 3000
    
    deployment:
      deploy_on_push: true
      deploy_on_pr: false
      artifact_retention_days: 1
      create_summary: true

# Monitoring and Logging
monitoring:
  # Health check configuration
  health_check:
    endpoint: "/api/health"
    expected_content: "OK"
    max_attempts: 10
    wait_between_attempts: 10
    initial_wait: 30
  
  # Performance monitoring
  performance:
    response_time_check: true
    http_headers_check: true
  
  # Logging configuration
  logging:
    level: INFO
    include_timestamps: true
    include_deployment_metadata: true

# Security Configuration
security:
  # File permissions
  file_permissions:
    web_files: "644"
    directories: "755"
    config_files: "600"
  
  # Web server security
  web_server:
    hide_version: true
    disable_server_tokens: true
    enable_security_headers: true

# Backup Configuration
backup:
  enabled: true
  retention_days: 7
  backup_location: "/var/backups/deployments"
  include_database: true  # Backup PostgreSQL database
